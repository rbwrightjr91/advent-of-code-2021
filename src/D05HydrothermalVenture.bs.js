// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Process = require("process");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_array = require("rescript/lib/js/caml_array.js");
var CamlinternalLazy = require("rescript/lib/js/camlinternalLazy.js");
var Belt_HashMapString = require("rescript/lib/js/belt_HashMapString.js");

var readInput = {
  LAZY_DONE: false,
  VAL: (function () {
      return Fs.readFileSync(Caml_array.get(Process.argv, 2), "utf8").trim().split("\n");
    })
};

function stringToInt(s) {
  var n = Belt_Int.fromString(s);
  if (n !== undefined) {
    return n;
  } else {
    console.error("Something went wrong");
    return -1;
  }
}

function parseLine(pointString) {
  var beginString = pointString.split(" -> ")[0];
  var endString = pointString.split(" -> ")[1];
  return {
          begin: {
            x: stringToInt(Caml_array.get(beginString.split(","), 0)),
            y: stringToInt(Caml_array.get(beginString.split(","), 1))
          },
          end: {
            x: stringToInt(Caml_array.get(endString.split(","), 0)),
            y: stringToInt(Caml_array.get(endString.split(","), 1))
          }
        };
}

function drawHznLine(hashMap, l) {
  var y = l.begin.y;
  var sorted = [
      l.begin.x,
      l.end.x
    ].sort();
  for(var x = Caml_array.get(sorted, 0) ,x_finish = Caml_array.get(sorted, 1); x <= x_finish; ++x){
    var n = Belt_HashMapString.get(hashMap, "x:" + x + ",y:" + y);
    if (n !== undefined) {
      Belt_HashMapString.set(hashMap, "x:" + x + ",y:" + y, n + 1 | 0);
    } else {
      Belt_HashMapString.set(hashMap, "x:" + x + ",y:" + y, 1);
    }
  }
  
}

function drawVrtLine(hashMap, l) {
  var x = l.begin.x;
  var sorted = [
      l.begin.y,
      l.end.y
    ].sort();
  for(var y = Caml_array.get(sorted, 0) ,y_finish = Caml_array.get(sorted, 1); y <= y_finish; ++y){
    var n = Belt_HashMapString.get(hashMap, "x:" + x + ",y:" + y);
    if (n !== undefined) {
      Belt_HashMapString.set(hashMap, "x:" + x + ",y:" + y, n + 1 | 0);
    } else {
      Belt_HashMapString.set(hashMap, "x:" + x + ",y:" + y, 1);
    }
  }
  
}

function partOne(param) {
  console.log("Day 05 - Part 1\n================");
  console.time("Completed in: ");
  var h = Belt_HashMapString.make(10);
  Belt_List.forEach(Belt_List.fromArray(Belt_Array.reduce(CamlinternalLazy.force(readInput), [], (function (acc, el) {
                    acc.push(parseLine(el));
                    return acc;
                  })).filter(function (el) {
                if (el.begin.x === el.end.x) {
                  return true;
                } else {
                  return el.begin.y === el.end.y;
                }
              })), (function (line) {
          if (line.begin.x === line.end.x) {
            drawVrtLine(h, line);
          }
          if (line.begin.y === line.end.y) {
            return drawHznLine(h, line);
          }
          
        }));
  console.log(Belt_HashMapString.valuesToArray(h).filter(function (e) {
            return e > 1;
          }).length);
  console.timeEnd("Completed in: ");
  console.log("================\n");
  
}

function partTwo(param) {
  console.log("Day 05 - Part 2\n================");
  console.log("================\n");
  
}

partOne(undefined);

partTwo(undefined);

exports.readInput = readInput;
exports.stringToInt = stringToInt;
exports.parseLine = parseLine;
exports.drawHznLine = drawHznLine;
exports.drawVrtLine = drawVrtLine;
exports.partOne = partOne;
exports.partTwo = partTwo;
/*  Not a pure module */
