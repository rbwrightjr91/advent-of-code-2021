// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Process = require("process");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_array = require("rescript/lib/js/caml_array.js");
var CamlinternalLazy = require("rescript/lib/js/camlinternalLazy.js");

var readInput = {
  LAZY_DONE: false,
  VAL: (function () {
      return Fs.readFileSync(Caml_array.get(Process.argv, 2), "utf8").split("\n");
    })
};

function parseDrawOrder(input) {
  return {
          contents: Belt_Array.reverse(Caml_array.get(input, 0).split(","))
        };
}

function parseBoards(input) {
  var a = Belt_Array.reverse(input);
  var boards = [];
  var board = [];
  while(a.length !== 0) {
    var string = a.pop();
    var el = string !== undefined ? string : "-1";
    if (el !== "") {
      board.push(el.split(" ").filter(function (e) {
                return e !== "";
              }));
    } else {
      boards.push(board);
      board = board.filter(function (e) {
            return false;
          });
    }
  };
  return {
          contents: boards
        };
}

function markBoard(board, number) {
  return Belt_Array.forEach(board, (function (row) {
                if (row.includes(number)) {
                  Belt_Array.set(row, row.findIndex(function (n) {
                            return n === number;
                          }), "-1");
                  return ;
                }
                
              }));
}

function transpose(board) {
  var transposed = [];
  for(var _for = 0 ,_for_finish = board.length; _for < _for_finish; ++_for){
    transposed.push([]);
  }
  for(var i = 0 ,i_finish = board.length; i < i_finish; ++i){
    for(var j = 0 ,j_finish = board.length; j < j_finish; ++j){
      Caml_array.get(transposed, j).push(Caml_array.get(Caml_array.get(board, i), j));
    }
  }
  return transposed;
}

function checkWinner(board) {
  var win = {
    contents: false
  };
  Belt_Array.forEach(board, (function (row) {
          if (!win.contents) {
            win.contents = Belt_Array.every(row, (function (e) {
                    return e === "-1";
                  }));
            return ;
          }
          
        }));
  if (!win.contents) {
    var transposed = transpose(board);
    Belt_Array.forEach(transposed, (function (row) {
            if (!win.contents) {
              win.contents = Belt_Array.every(row, (function (e) {
                      return e === "-1";
                    }));
              return ;
            }
            
          }));
  }
  return win.contents;
}

function playRound(num, boards) {
  var winner = {
    contents: -1
  };
  Belt_Array.forEachWithIndex(boards, (function (i, board) {
          markBoard(board, num);
          if (checkWinner(board)) {
            winner.contents = i;
            return ;
          }
          
        }));
  return winner.contents;
}

function parseResults(board, numberString) {
  var n = Belt_Int.fromString(numberString);
  return Math.imul(n !== undefined ? n : -1, Belt_Array.reduce(Belt_Array.concatMany(board).filter(function (e) {
                      return e !== "-1";
                    }), 0, (function (acc, el) {
                    var n = Belt_Int.fromString(el);
                    return acc + (
                            n !== undefined ? n : -1
                          ) | 0;
                  })));
}

function partOne(param) {
  console.log("Day 04 - Part 1\n================");
  var input = CamlinternalLazy.force(readInput);
  var drawOrder = parseDrawOrder(Belt_Array.slice(input, 0, 1));
  var boards = parseBoards(Belt_Array.sliceToEnd(input, 2));
  var winner = -1;
  var lastDrawnNum = "-1";
  while(winner < 0) {
    var s = drawOrder.contents.pop();
    lastDrawnNum = s !== undefined ? s : "-1";
    winner = playRound(lastDrawnNum, boards.contents);
  };
  var result = parseResults(Caml_array.get(boards.contents, winner), lastDrawnNum);
  console.log(result);
  console.log("================\n");
  
}

function partTwo(param) {
  console.log("Day 04 - Part 2\n================");
  var input = CamlinternalLazy.force(readInput);
  var drawOrder = parseDrawOrder(Belt_Array.slice(input, 0, 1));
  var boards = parseBoards(Belt_Array.sliceToEnd(input, 2));
  var lastDrawnNum = "-1";
  while(boards.contents.length > 1) {
    var s = drawOrder.contents.pop();
    lastDrawnNum = s !== undefined ? s : "-1";
    var winner = playRound(lastDrawnNum, boards.contents);
    if (winner >= 0) {
      boards.contents.splice(winner, 1);
    }
    
  };
  var s$1 = drawOrder.contents.pop();
  lastDrawnNum = s$1 !== undefined ? s$1 : "-1";
  playRound(lastDrawnNum, boards.contents);
  console.log(parseResults(Caml_array.get(boards.contents, 0), lastDrawnNum));
  console.log("================\n");
  
}

partOne(undefined);

partTwo(undefined);

exports.readInput = readInput;
exports.parseDrawOrder = parseDrawOrder;
exports.parseBoards = parseBoards;
exports.markBoard = markBoard;
exports.transpose = transpose;
exports.checkWinner = checkWinner;
exports.playRound = playRound;
exports.parseResults = parseResults;
exports.partOne = partOne;
exports.partTwo = partTwo;
/*  Not a pure module */
