// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Js_option = require("rescript/lib/js/js_option.js");
var Caml_array = require("rescript/lib/js/caml_array.js");
var CamlinternalLazy = require("rescript/lib/js/camlinternalLazy.js");

var readInput = {
  LAZY_DONE: false,
  VAL: (function () {
      return Fs.readFileSync("data/02/01-input.txt", "utf8").split("\n");
    })
};

var arr = CamlinternalLazy.force(readInput).map(function (e) {
      var el = e.split(" ");
      var n = Belt_Int.fromString(Caml_array.get(el, 1));
      return [
              Caml_array.get(el, 0),
              n !== undefined ? n : -1
            ];
    });

var tuple = arr.reduce((function (acc, command) {
        var distance = command[1];
        var match = Js_option.some(command[0]);
        if (match !== undefined) {
          switch (match) {
            case "down" :
                return [
                        acc[0],
                        acc[1],
                        acc[2] + distance | 0
                      ];
            case "forward" :
                var aim = acc[2];
                return [
                        acc[0] + Math.imul(aim, distance) | 0,
                        acc[1] + distance | 0,
                        aim
                      ];
            case "up" :
                return [
                        acc[0],
                        acc[1],
                        acc[2] - distance | 0
                      ];
            default:
              console.log("Invalid");
              return acc;
          }
        } else {
          console.log("Invalid");
          return acc;
        }
      }), [
      0,
      0,
      0
    ]);

var position = tuple[1];

var depth = tuple[0];

console.log(Math.imul(depth, position));

exports.readInput = readInput;
exports.arr = arr;
exports.tuple = tuple;
exports.depth = depth;
exports.position = position;
/* arr Not a pure module */
